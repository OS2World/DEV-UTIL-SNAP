#***************************************************************************
#
#                         SciTech Display Doctor
#
#  ========================================================================
#
#   Copyright (C) 1991-2004 SciTech Software, Inc. All rights reserved.
#
#   This file may be distributed and/or modified under the terms of the
#   GNU General Public License version 2.0 as published by the Free
#   Software Foundation and appearing in the file LICENSE.GPL included
#   in the packaging of this file.
#
#   Licensees holding a valid Commercial License for this product from
#   SciTech Software, Inc. may use this file in accordance with the
#   Commercial License Agreement provided with the Software.
#
#   This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING
#   THE WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE.
#
#   See http://www.scitechsoft.com/license/ for information about
#   the licensing options available and how to purchase a Commercial
#   License Agreement.
#
#   Contact license@scitechsoft.com if any conditions of this licensing
#   are not clear to you, or you have questions about licensing options.
#
#  ========================================================================
#
# Language:    GNU AS
# Environment: PPC 32-bit big-endian.
#
# Description: Assembly language test routines for the Nucleus
#              performance profiling program.
#
#***************************************************************************

.section        ".text"
.align          2

#----------------------------------------------------------------------------
# void clearBufLin(void *buffer,long value,uint len)
#----------------------------------------------------------------------------
# r3=buffer, r4=value, r5=len
#----------------------------------------------------------------------------

.align  2
.global clearBufLin
.type   clearBufLin,@function

clearBufLin:
        addi    r3,r3,-4        # decrement dst
        srawi   r5,r5,2         # divide len by 4
        cmpwi   0,r5,0          # if count of words is now 0 ...
        beqlr                   # ... return
        mtctr   r5              # otherwise load the counter register
        andi.   r4,r4,255       # turn least significant byte of value
        slwi    r0,r4,8         # into a 32-bit fill word
        or      r4,r4,r0        # got 16 bits
        slwi    r0,r4,16        # now make it 32 bits
        or      r4,r4,r0        # r4 now has 32-bits of fill

1:
        stwu    r4,4(r3)        # store it and update r3
        bdnz    1b              # loop until done

        blr

#----------------------------------------------------------------------------
# void clearBufDownLin(void *buffer,long value,uint len)
#----------------------------------------------------------------------------
# r3=buffer, r4=value, r5=len
#----------------------------------------------------------------------------
.align  2
.global clearBufDownLin
.type   clearBufDownLin,@function

clearBufDownLin:
        srawi   r5,r5,2         # divide len by 4
        cmpwi   0,r5,0          # if count of words is now 0 ...
        beqlr                   # ... return
        mtctr   r5              # otherwise load the counter register
        andi.   r4,r4,255       # turn least significant byte of value
        slwi    r0,r4,8         # into a 32-bit fill word
        or      r4,r4,r0        # got 16 bits
        slwi    r0,r4,16        # now make it 32 bits
        or      r4,r4,r0        # r4 now has 32-bits of fill

        slwi    r5,r5,2         # multiply len by 4
        add     r3,r3,r5        # point at end of buffer

1:
        stwu    r4,-4(r3)       # store value and update r3
        bdnz    1b              # loop until done

        blr

#----------------------------------------------------------------------------
# void readBufLin(void *buffer,uint len)
#----------------------------------------------------------------------------
# r3=buffer, r4=len
#----------------------------------------------------------------------------
.align  2
.global readBufLin
.type   readBufLin,@function

readBufLin:
        addi    r3,r3,-4        # decrement dst
        srawi   r4,r4,2         # divide len by 4
        cmpwi   0,r4,0          # if count of words is now 0 ...
        beqlr                   # ... return
        mtctr   r4              # otherwise load the counter register

1:
        lwzu    r0,4(r3)        # get word (discarding it afterwards)
        bdnz    1b              # loop until done

        blr

#----------------------------------------------------------------------------
# void copyBufLin(void *buffer,char *image,uint len)
#----------------------------------------------------------------------------
# r3=buffer, r4=image, r5=len
#----------------------------------------------------------------------------
.align  2
.global copyBufLin
.type   copyBufLin,@function

copyBufLin:
        addi    r3,r3,-4        # decrement dst ptr
        addi    r4,r4,-4        # and src ptr as well
        srawi   r5,r5,2         # divide len by 4
        cmpwi   0,r5,0          # if count of words is now 0 ...
        beqlr                   # ... return
        mtctr   r5              # otherwise load the counter register

1:
        lwzu    r0,4(r4)        # load the word and update r4
        stwu    r0,4(r3)        # then store it and update r3
        bdnz    1b              # loop until done

        blr

